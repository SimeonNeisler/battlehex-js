
//-------------------------------------------------------------------------------
// Users
//-------------------------------------------------------------------------------

path /users {
    read() {true}
}

path /users/{userId} is User {
    write() {(doesExist(this) && prior(this).id == auth.uid && this.id == auth.uid) || (doesNotExist(this) && this.id == auth.uid)}
    validate() {this.id == userId}
}

type User extends TimeStamped {
    firstName: String,
    lastName: String,
    userName: String,
    id: Uid
}

type Uid extends Object {
    id: String,
    validate() {isUid(this)}
}

type ExistingUserId extends Uid {
    existence: Boolean
}

//1e2b7288-45f5-4f98-9f81-1ab192245a7b

function isUid(value) {
    return value.test(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);
}

function isCurrentUser(userId) {
    return auth.uid == userId;
}

function isExistingUserId(userId) {
    return root.users[userId] != null;
}

//-------------------------------------------------------------------------------
// Identities
//-------------------------------------------------------------------------------

path /objects/identities {
  read() {true}
  write() {doesNotExist(this)}
}

path /objects/identities/{identityId} is Identity {
  read() {doesCurrentUserOwnIdentity(this)}
  write() {doesCurrentUserOwnIdentity(this)}

}

type Identity extends TimeStamped {
  provider: String,
  providerUserId: String,
  accessToken: String,
  userId: String,
  id: IdentityId
}

type IdentityId extends String {
  validate() {isIdentityId(this)}
}

function isIdentityId(value) {
    return value.test(/^(facebook|twitter|google)\|[0-9]+$/);
}

function doesUserOwnIdentity(identityId, userId) {
  return root.objects.identities[identityId].userId == userId;
}

function doesCurrentUserOwnIdentity(identityId) {
  return doesUserOwnIdentity(identityId, auth.uid);
}
//-------------------------------------------------------------------------------
// Roles
//-------------------------------------------------------------------------------

path /roles/{userId} {
    read() {isCurrentUser(root.roles[userId])}
    write() {isCurrentUserAdmin()}
}

path /roles/{userId}/admin is Boolean {
    //validate() {roleName == instanceof String}
}

function isCurrentUserAdmin() {
    return isUserAdmin(auth.uid);
}

function isUserAdmin(userId) {
    return root.roles[userId].admin == true;
}


//-------------------------------------------------------------------------------
// Games
//-------------------------------------------------------------------------------

path /games/{gameId} is Game {
    read() {isCurrentUserGamePlayer(this)}
    write() {doesExist(this) && isCurrentUserGamePlayer(this) && prior(this).players.userId == auth.uid ||  doesNotExist(this) && this.players.userId == auth.uid}
    validate() {prior(this).players == this.players}
}

type Game extends Entity {
        name: String
}

type ExistingGameId extends Id {
    //return isExistingGameId(this);
    existence: Boolean
}

function isExistingGameId(gameId) {
    return root.games[gameId] != null;
}


//-------------------------------------------------------------------------------
// GamePlayers
//-------------------------------------------------------------------------------

path /games/{gameId}/players is GamePlayer {
    read() {isCurrentUserGamePlayer(root.games[gameId])}
}

type GamePlayer extends TimeStamped {
    userId: String
}

function isCurrentUserGamePlayer(gameId) {
    return isUserGamePlayer(gameId, auth.uid);
}

function isUserGamePlayer(gameId, userId) {
    return root.games[gameId].players.userId == userId;
}


//-------------------------------------------------------------------------------
// Decks
//-------------------------------------------------------------------------------

path /decks/{deckId}/info is Deck {
    read() {doesCurrentUserOwnObject(this)}
    write() {(doesExist(this) && doesCurrentUserOwnObject(this) && willCurrentUserOwnObject(this)) || (doesNotExist(this) && willCurrentUserOwnObject(this))}
}

type Deck extends Entity {
    deckName: String,
    userId: String
}

type ExistingDeckId extends Id {
    //return isExistingDeckId(this);
    existence: Boolean
}

function isExistingDeckId(deckId) {
    return root.decks[deckId] != null;

}

function isCurrentUsersDeck(deckId) {
    return auth.uid == root.decks[deckId].info.userId;
}

function doesUserIdOwnDeckId(deckId, userId) {
    return (root.decks[deckId].info.userId == userId);
}

function doesCurrentUserOwnDeckId(deckId) {
    return doesUserIdOwnDeckId(deckId, auth.uid);
}


//-------------------------------------------------------------------------------
// Cards
//-------------------------------------------------------------------------------

path /cards {
        read() {true}
}

path /cards/{cardId} is Card {
        read() { true }
        write() { false }
        validate() { this.id == cardId }
}

type Card extends Entity {
        cardName: String,
        cardCost: Number,
        cardStrength: Number,
        cardHP: Number,
        cardRange: Number,
        cardDeployCost: Number
}

type ExistingCardId extends Id {
    //return isExistingCardId(this);
    existence: Boolean
}

function isExistingCardId(cardId) {
    return root.cards[cardId] != null;
}


//-------------------------------------------------------------------------------
// UserCards
//-------------------------------------------------------------------------------

path /userCards/{userId}/{cardId} is UserCard {
        read() { doesCurrentUserOwnObject(root.userCards[auth.uid][cardId]) }
        write() { false }
}

type UserCard extends TimeStamped {
        //userId: String,
        cardId: ExistingCardId,
        count: Number
}

function doesUserIdOwnCardId(userId, cardId) {
    return (root.userCards[userId][cardId] != null);
}

function doesCurrentUserOwnCardId(cardId) {
    return doesUserIdOwnCardId(auth.uid, cardId);
}

function doesUserOwnCardCount(userId, cardId, count) {
    return (root.userCards[userId][cardId].count >= count);
}


//-------------------------------------------------------------------------------
// DeckCards
//-------------------------------------------------------------------------------

path /decks/{deckId}/cards/{cardId} is DeckCard {
    read() { doesCurrentUserOwnObject(this) }
    write() {
        doesCurrentUserOwnCardId(cardId) &&
        doesCurrentUserOwnDeckId(deckId) &&
        this.index <= 30
    }
    validate() {
        this.deckId == deckId && this.cardId == cardId
    }
}

type DeckCard extends TimeStamped {
    deckId: ExistingDeckId,
    cardId: ExistingCardId,
    index: Number,
    total: Number
}

function willCardExistInDeck(newRoot, cardId, deckId) {
    newRoot.decks[deckId].cards[cardId] != null;
}


//-------------------------------------------------------------------------------
// DeckCardsIndex
//-------------------------------------------------------------------------------

path /decks/{deckId}/cardsIndex/{index} is DeckCardIndex {
    validate() {
        index >= 0 && index < 30 &&
        willCardExistInDeck(this.parent().parent().parent().parent(), this.cardId, deckId)
    }
}

path /decks/{deckId}/cardsIndex/{index}/index {
    validate() { this == index}
}

type DeckCardIndex {
    index: Number,
    cardId: ExistingCardId

}

function willCardExistInDeckIndex(newRoot, cardId, deckId) {
  return newRoot.decks[deckId].cardsIndex[index][cardId] != null;
}


//-------------------------------------------------------------------------------
// Indexes
//-------------------------------------------------------------------------------

path /indexes/userIdToGameIds/{userId} {
    validate() {isExistingUserId(root.indexes.userIdToGameIds[userId])}
    read() {isCurrentUser(root.index.userIdToGameIds[userId])}
}

path /indexes/userIdToGameIds/{userId}/games is ExistingGameId {
    write() {isCurrentUserGamePlayer(this) && isCurrentUser(root.indexes.userIdToGameIds[userId])}
}


//-------------------------------------------------------------------------------
// GameCards
//-------------------------------------------------------------------------------

path /games/gameCards {
        read() {false}
        write() {false}
}

path /games/gameCards/{gameCardId} is GameCard {
        read() {doesCurrentUserOwnObject(this)}
        write() {false}
}

type GameCard extends Entity {
        gameId: String,
        userId: String,
        cardId: String,
        cardName: String,
        cardStrength: Number,
        cardHP: Number,
        cardRange: Number,
        cardDeployCost: Number
}


//-------------------------------------------------------------------------------
// GameDecks
//-------------------------------------------------------------------------------

path /games/gameDecks {
}

path /games/gameDecks/{gameDeck} is GameDeck {
}

type GameDeck extends Entity {
        userId: String,
        gameId: String,
        deckName: String,
        deckSize: Number,
        deckCards: GameCard[]
}


//-------------------------------------------------------------------------------
// GameHands
//-------------------------------------------------------------------------------

path /games/hands {
}

path /games/hands/{hand} is GameHand {
        read() {doesCurrentUserOwnObject(root.games.hands[hand])}
        write() {willCurrentUserOwnObject(this) && doesCurrentUserOwnObject(this) && isUsersGameTurn(this.gameId, this.userId) && !isCurrentGameTurnComplete(this.gameId)}
        validate() {prior(this).handSize >= this.handSize && prior(this).handSize <= this.handSize + 3}
}

type GameHand extends Entity {
        gameId: String,
        userId: String,
        handSize: Number,
        handContents: GameCard[]
}




//-------------------------------------------------------------------------------
// GameDiscardPiles
//-------------------------------------------------------------------------------

path /games/discardPiles/{discardPile} is DiscardPile {
        write() {(willCurrentUserOwnObject(this) && doesCurrentUserOwnObject(this) && isUsersGameTurn(this.userId, this.gameId) && !isCurrentGameTurnComplete(this.gameId))}
}

type DiscardPile extends Entity {
        userId: String,
        gameId: String,
        contents: GameCard[]
}


//-------------------------------------------------------------------------------
// GameMaps
//-------------------------------------------------------------------------------

path /gamemaps/{mapId} is GameMap {
        read() {isCurrentUserGamePlayer(root.gamemaps[mapId].gameId)}
}

type GameMap extends Entity {
        gameId: ExistingGameId
}

path /gamemaps/{mapId}/tiles is MapTile {
        write() {isCurrentUserGamePlayer(root.gamemaps[mapId].gameId) && isCurrentUsersGameTurn(root.gamemaps[mapId].gameId) && !isCurrentGameTurnComplete(root.gamemaps[mapId].gameId)}
        validate() {prior(this).terrain == this.terrain && prior(this).resource == this.resource && prior(this).resourceQuantity == this.resourceQuantity}
}

type MapTile extends Entity {
        tileNum: Number,
        terrain: String,
        resource: String,
        resourceQuantity: Number
}

path /gamemaps/{mapId}/tiles/unit is BoardUnit {
        read() {isCurrentUserGamePlayer(root.gamemaps[mapId].gameId)}
}

type BoardUnit extends Entity {
        name: String,
        player: GamePlayer,
        health: Number,
        maxHealth: Number,
        damage: Number,
        move: Number,
        range: Number,
        attackDirections: Boolean[]
}



//-------------------------------------------------------------------------------
// States
//-------------------------------------------------------------------------------

path /states/games/{gameId}/info is GameState {
    read() {isCurrentUserGamePlayer(gameId)}
}

//Patch currentGameTurnId Later

type GameState {
    gameId: ExistingGameId,
    currentGameTurnId: Id
}



function isCurrentUsersGameTurn(gameId) {
    return isUsersGameTurn(gameId, auth.uid);
}

function getCurrentGameTurnId(gameId) {
    return root.states.games[gameId].info.currentGameTurnId;
}

function getCurrentGameTurn(gameId) {
    return root.states.games[gameId].turns[getCurrentGameTurnId(gameId)];
}

function isUsersGameTurn(gameId, userId) {
    return getCurrentGameTurn(gameId).userId == userId;
}

function isCurrentGameTurnComplete(gameId) {
    return getCurrentGameTurn(gameId).complete;
}

function isGameTurnComplete(gameId, turnId) {
    return root.states.games[gameId].turns[turnId].complete;
}

path /states/games/{gameId}/turns/{turnId} is GameTurnState {
    read() {isCurrentUserGamePlayer(root.states.games[gameId])}
    write() {!isGameTurnComplete(gameId, turnId)}
}

path /states/games/{gameId}/turns/{turnId}/id {
    validate() {this == turnId}
}

type GameTurnState extends Entity {
    gameId: ExistingGameId,
    userId: String,
    complete: Boolean
}

path /states/games/{gameId}/turns/{turnId}/complete {
    read() {isUserGamePlayer(root.states.games[gameId], root.states.games[gameId].players.userId)}
    write() {isCurrentUsersGameTurn(root.states.games[gameId])}
}



//-------------------------------------------------------------------------------
// GameDrawPiles
//-------------------------------------------------------------------------------

path /states/games/{gameId}/drawPiles/{drawPileId} is GameDrawPileState {
    read() {doesCurrentUserOwnObject(this)}
    write() {willCurrentUserOwnObject(this) && doesCurrentUserOwnObject(this) && isUsersGameTurn(this.gameId, this.userId) && !isCurrentGameTurnComplete(this.gameId)}
    validate() {prior(this).numberCards >= this.numberCards && prior(this).numberCards <= this.numberCards + 3}
}

type GameDrawPileState {
    gameId: ExistingGameId,
    userId: String,
    numberCards: Number
}

function isUsersDrawPile(gameId, drawPileId, userId) {
   return root.states.games[gameId].drawPiles[drawPileId].userId == userId;
}

function isCurrentUsersDrawPile(gameId, drawPileId) {
   return isUsersDrawPile(gameId, drawPileId, auth.uid);
}

function isCurrentDrawPileIndex(gameId, drawPileId, drawPileIndexCheckVal) {
   return root.states.games[gameId].drawPiles[drawPileId].drawPileIndex == drawPileIndexCheckVal;
}

path /states/games/{gameId}/drawPiles/{drawPileId}/drawPileIndex is GameDrawPileCard  {
   read() {isCurrentUsersDrawPile(root.states.games[gameId], root.states.games[gameId].drawPiles[drawPileId]) && isCurrentDrawPileIndex(root.states.games[gameId], root.states.games[gameId].drawPiles[drawPileId], root.states.games[gameId].drawPiles[drawPileId].drawPileIndex)}
}

path /states/games/{gameId}/drawPiles/{drawPileId}/drawPileIndex/index  {
   //validate() {this == drawPileIndex}
}

type GameDrawPileCard {
    index: Number,
    name: String
}


//-------------------------------------------------------------------------------
// Utils
//-------------------------------------------------------------------------------

type Entity extends TimeStamped {
    id: Id
}

type TimeStamped {
    createdAt: Number,
    updatedAt: Number
}

type Id extends Object {
    composition: String
}

function doesNotExist(value) {
    return prior(value) == null;
}

function doesExist(value) {
    return prior(value) != null;
}

function willCurrentUserOwnObject(object) {
    return willUserOwnObject(object, auth.uid);
}

function willUserOwnObject(object, userId) {
   return object.userId == userId;
}

function doesCurrentUserOwnObject(object) {
    return doesUserOwnObject(object, auth.uid);
}
function doesUserOwnObject(object, userId) {
    return (prior(object).userId == userId);
}
